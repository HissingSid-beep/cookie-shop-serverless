AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Specification template for cookies
Parameters:
  S3Bucket:
    Type : String
    Default: "bucket value will be overriden in buildspec"
Globals:
  Function:
    Runtime: python3.7
    Timeout: 3
    MemorySize: 128
  Api:
    EndpointConfiguration: REGIONAL
    MethodSettings:
      - HttpMethod: "*"
        ResourcePath: "/*"
        MetricsEnabled: false
        DataTraceEnabled: false
        LoggingLevel: "INFO"
    TracingEnabled: false
Resources:
  LambdaLoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "lambda-logging-Policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Roles:
        - !Ref CookiesLambdaRole
        - !Ref OrdersLambdaRole
        - !Ref OrdersStreamLambdaRole

  CookiesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  OrdersLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    
  OrdersStreamLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  CookiesGetLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'cookies.get_handler'
      CodeUri: .
      Description: 'Get cookies for order'
      Policies:
        - AWSLambdaExecute
      Environment:
        Variables:
          COOKIES_TABLE_NAME: !Ref CookiesDynamoTable
      Events:
        CookiesGetApi:
          Type: Api
          Properties:
            RestApiId: !Ref CookiesApiGateway
            Path: /cookies
            Method: GET
      Role: !GetAtt CookiesLambdaRole.Arn

  CookiesPostLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'cookies.post_handler'
      CodeUri: .
      Description: 'Add cookies to shop'
      Policies:
        - AWSLambdaExecute
      Environment:
        Variables:
          COOKIES_TABLE_NAME: !Ref CookiesDynamoTable
      Events:
        CookiesPostApi:
          Type: Api
          Properties:
            RestApiId: !Ref CookiesApiGateway
            Path: /cookies
            Method: POST
      Role: !GetAtt CookiesLambdaRole.Arn

  OrdersPostLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'orders.post_handler'
      CodeUri: .
      Description: 'Order cookies'
      Policies:
        - AWSLambdaExecute
      Environment:
        Variables:
          ORDERS_TABLE_NAME: !Ref OrdersDynamoTable
      Events:
        OrdersPostApi:
          Type: Api
          Properties:
            RestApiId: !Ref CookiesApiGateway
            Path: /orders
            Method: POST
      Role: !GetAtt OrdersLambdaRole.Arn

  OrdersStreamLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'orders.stream_handler'
      CodeUri: .
      Description: 'Update cookies quantity from order'
      Policies:
        - AWSLambdaExecute
      Environment:
        Variables:
          COOKIES_TABLE_NAME: !Ref CookiesDynamoTable
      Role: !GetAtt OrdersStreamLambdaRole.Arn

  CookiesApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "cookie-shop-serverless-api"
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location:
              "Fn::Sub":
                "s3://${S3Bucket}/swagger.yaml"
      StageName: Prod

  CookiesTablePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "cookies-table-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:GetItem
            Resource: !GetAtt CookiesDynamoTable.Arn
      Roles:
        - !Ref CookiesLambdaRole
        - !Ref OrdersStreamLambdaRole

  OrdersTablePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "orders-table-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt OrdersDynamoTable.Arn
      Roles:
        - !Ref OrdersLambdaRole

  CookiesDynamoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Cookies
      PrimaryKey:
        Name: id
        Type: String
      SSESpecification:
        SSEEnabled: true

  OrdersDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  OrdersStream:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - DynamoRequestsStreamPolicy
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt OrdersDynamoTable.StreamArn
      FunctionName: !GetAtt OrdersStreamLambda.Arn
      StartingPosition: LATEST
